{"ast":null,"code":"var _jsxFileName = \"/Users/matthew/Documents/GitHub/_Node/react-express-redux-poc/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport withRedux from \"./Redux/containers\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      un: \"\",\n      pw: \"\"\n    };\n\n    this.handleUnInput = event => {\n      this.setState({ ...this.state,\n        un: event.target.value\n      });\n    };\n\n    this.handlePwInput = event => {\n      this.setState({ ...this.state,\n        pw: event.target.value\n      });\n    };\n\n    this.handleLogout = () => {\n      this.props.setAccountStatus(false);\n    };\n\n    this.handleLogin = () => {\n      fetch(\"http://localhost:8002/authorize\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          un: this.state.un,\n          pw: this.state.pw\n        })\n      }).then(res => res.text()).then(data => {\n        if (data === \"true\") {\n          this.props.setAccountStatus(true);\n        } else {\n          alert(\"Incorrect credentials!\");\n        }\n      }).catch(err => console.log(\"Something went wrong! \" + err.message));\n    };\n  }\n\n  render() {\n    const {\n      isAccountVerified\n    } = this.props.state;\n    return /*#__PURE__*/React.createElement(BrowserRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Home\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/protected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Protected\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, isAccountVerified ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleLogout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Logout\") : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"Try to visit the 'Protected' route above. Unless you are logged in it won't work.\"), \"Username:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: this.handleUnInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }), \"Password:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      onInput: this.handlePwInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, \"Username is 'a' password is 'a'\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleLogin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, \"Login\"))), /*#__PURE__*/React.createElement(Routes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withRedux(App);","map":{"version":3,"sources":["/Users/matthew/Documents/GitHub/_Node/react-express-redux-poc/frontend/src/App.js"],"names":["React","Component","BrowserRouter","Link","Routes","withRedux","App","state","un","pw","handleUnInput","event","setState","target","value","handlePwInput","handleLogout","props","setAccountStatus","handleLogin","fetch","method","headers","body","JSON","stringify","then","res","text","data","alert","catch","err","console","log","message","render","isAccountVerified","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport withRedux from \"./Redux/containers\";\n\nclass App extends Component {\n  state = {\n    un: \"\",\n    pw: \"\"\n  };\n\n  handleUnInput = event => {\n    this.setState({\n      ...this.state,\n      un: event.target.value\n    });\n  };\n\n  handlePwInput = event => {\n    this.setState({\n      ...this.state,\n      pw: event.target.value\n    });\n  };\n\n  handleLogout = () => {\n      this.props.setAccountStatus(false);\n  }\n\n  handleLogin = () => {\n    fetch(\"http://localhost:8002/authorize\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ un: this.state.un, pw: this.state.pw })\n    })\n      .then(res => res.text())\n      .then(data => {\n        if (data === \"true\") {\n          this.props.setAccountStatus(true);\n        } else {\n          alert(\"Incorrect credentials!\");\n        }\n      })\n      .catch(err => console.log(\"Something went wrong! \" + err.message));\n  };\n  render() {\n    const { isAccountVerified } = this.props.state;\n\n    return (\n      <BrowserRouter>\n        <Link to=\"/\">Home</Link>\n        <br />\n        <Link to=\"/protected\">Protected</Link>\n        <div style={{ margin: '40px' }}>\n          {isAccountVerified ? (\n            <button onClick={this.handleLogout}>Logout</button>\n          ) : (\n            <React.Fragment>\n              <p>\n                Try to visit the 'Protected' route above. Unless you are logged\n                in it won't work.\n              </p>\n              Username:\n              <input type=\"text\" onInput={this.handleUnInput} />\n              <br />\n              Password:\n              <input type=\"password\" onInput={this.handlePwInput} />\n              <br />\n              <small>Username is 'a' password is 'a'</small>\n              <br />\n              <button onClick={this.handleLogin}>Login</button>\n            </React.Fragment>\n          )}\n        </div>\n        <Routes />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withRedux(App);\n"]},"metadata":{},"sourceType":"module"}